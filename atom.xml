<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>流浪兔的博客</title>
  
  <subtitle>不折腾的人生怎么算一辈子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-14T08:59:23.513Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>流浪兔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6之变量的解构和赋值</title>
    <link href="http://yoursite.com/2019/08/14/ES6%E4%B9%8B%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E5%92%8C%E8%B5%8B%E5%80%BC/"/>
    <id>http://yoursite.com/2019/08/14/ES6之变量的解构和赋值/</id>
    <published>2019-08-14T01:23:23.000Z</published>
    <updated>2019-08-14T08:59:23.513Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式： <span class="built_in">let</span> [] = [];</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> [a,b,c] = [1,2,3]; &lt;!-- 左边是变量，右边是值 ,如果匹配不到值，则该变量是undefined--&gt;</span><br><span class="line"></span><br><span class="line">const [a,b,c] = [1,2];&lt;!-- 如果匹配不到值，则该变量是undefined --&gt;</span><br></pre></td></tr></table></figure><p>》》如果右侧是不可遍历的解构则会报错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> [foo] = 1;</span><br><span class="line"><span class="built_in">let</span> [foo] = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">let</span> [foo] = NaN;</span><br><span class="line"><span class="built_in">let</span> [foo] = undefined;</span><br><span class="line"><span class="built_in">let</span> [foo] = null;</span><br><span class="line"><span class="built_in">let</span> [foo] = &#123;&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式： <span class="built_in">let</span> &#123;&#125; = &#123;&#125;;</span><br><span class="line"><span class="built_in">let</span> &#123;name,age&#125; = &#123;name:<span class="string">"baba"</span>,age:<span class="string">"222"</span>&#125;;&lt;!-- 左边变量的名称必须和又不对象中key名称保持一致，否则匹配结果为undefined --&gt;</span><br></pre></td></tr></table></figure><h3 id="字符串，数值，布尔值解构和赋值"><a href="#字符串，数值，布尔值解构和赋值" class="headerlink" title="字符串，数值，布尔值解构和赋值"></a>字符串，数值，布尔值解构和赋值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [a, b, c, d, e] = <span class="string">'hello'</span>;&lt;!-- 字符串赋值，左边是数组，右边是字符串 --&gt;</span><br></pre></td></tr></table></figure><h3 id="函数解构赋值"><a href="#函数解构赋值" class="headerlink" title="函数解构赋值"></a>函数解构赋值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn</span></span>()&#123;</span><br><span class="line"><span class="built_in">return</span>[1,2,3,4,5,6,7];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> [a,,,b,...c] = fn();</span><br><span class="line">console.log(a,b,c);</span><br><span class="line">//1 4 [5,6,7]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数组的解构赋值&quot;&gt;&lt;a href=&quot;#数组的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;数组的解构赋值&quot;&gt;&lt;/a&gt;数组的解构赋值&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
      <category term="变量的解构赋值" scheme="http://yoursite.com/tags/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>ES6知识总结</title>
    <link href="http://yoursite.com/2019/08/13/ES6%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/08/13/ES6知识总结/</id>
    <published>2019-08-13T09:02:22.000Z</published>
    <updated>2019-08-14T01:18:30.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="es6环境搭建流程"><a href="#es6环境搭建流程" class="headerlink" title="es6环境搭建流程"></a>es6环境搭建流程</h3><p>》》通过npm init 生成 package.json<br>》》通过npm install webpack -D 生成node_moudles<br>》》webpack.config.js配置文件<br>》》src(开发阶段的目录)<br>    index.html<br>    index.js(入口文件)<br>    jsfiles(存放JS的文件夹)<br>》》public(生产阶段的目录)</p><h3 id="let-const"><a href="#let-const" class="headerlink" title="let const"></a>let const</h3><p>》》只能在所声明的模块内有效；<br>》》不能重复声明变量，否则报错；<br>》》只能先声明，后使用变量；</p><p>const:<br>》》用来声明常量；<br>》》声明过的常亮值只能读，不能改写；<br>》》const声明的对象可以改变其属性值；</p><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><p>》》babel 把es6转化成es3或者es5;(IE8等浏览器不支持ES6语法)<br>》》ployfill:由于很多语法不能转码，需要安装ployfill;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;es6环境搭建流程&quot;&gt;&lt;a href=&quot;#es6环境搭建流程&quot; class=&quot;headerlink&quot; title=&quot;es6环境搭建流程&quot;&gt;&lt;/a&gt;es6环境搭建流程&lt;/h3&gt;&lt;p&gt;》》通过npm init 生成 package.json&lt;br&gt;》》通过npm in
      
    
    </summary>
    
    
      <category term="let const var" scheme="http://yoursite.com/tags/let-const-var/"/>
    
  </entry>
  
  <entry>
    <title>二三维一体化项目(GIS平台)项目总结</title>
    <link href="http://yoursite.com/2019/08/05/%E4%BA%8C%E4%B8%89%E7%BB%B4%E4%B8%80%E4%BD%93%E5%8C%96%E9%A1%B9%E7%9B%AE-GIS%E5%B9%B3%E5%8F%B0-%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/08/05/二三维一体化项目-GIS平台-项目总结/</id>
    <published>2019-08-05T03:07:24.000Z</published>
    <updated>2019-08-05T03:07:24.740Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据中台项目浅谈</title>
    <link href="http://yoursite.com/2019/08/05/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E9%A1%B9%E7%9B%AE%E6%B5%85%E8%B0%88/"/>
    <id>http://yoursite.com/2019/08/05/数据中台项目浅谈/</id>
    <published>2019-08-05T01:22:06.000Z</published>
    <updated>2019-08-05T03:02:22.330Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>数据中台主要是为企业内部提供的实现应用服务管理和数据管理的一个管理平台，主要包括权限管理，应用管理，服务管理和数据管理等功能模块。</p><h3 id="引用的前端技术"><a href="#引用的前端技术" class="headerlink" title="引用的前端技术"></a>引用的前端技术</h3><p>目前使用的是DOJO这个库，该库可以提供丰富的package，在实战项目中，可以动态加载各个package。<br>该项目中主要运用到的和DOJO相关的技术：<br>1.事件处理<br>2.DOM节点操作<br>3.API数据交互<br>4.数据封装处理<br>5.模块构建创造</p><h3 id="项目框架构造"><a href="#项目框架构造" class="headerlink" title="项目框架构造"></a>项目框架构造</h3><p>1.通过dojo构造容器，容器有href属性，通过设置每个模板的url地址给href,每个每个模板被嵌入到对应的容器。<br>2.在实际前端代码中，通过异步记载dojo模块来实现数据和节点的操作。<br>3.通过facade思想进行封装request请求，主要原因是数据中台的项目调用的服务的差异性。<br>3.前端组件的创造，是通过define,declare进行组件的依赖性，继承性创建，返回一个新的对象。通过reqire加载到使用该模块的页面中。</p><h3 id="使用dojo库在开发中实际遇到的问题"><a href="#使用dojo库在开发中实际遇到的问题" class="headerlink" title="使用dojo库在开发中实际遇到的问题"></a>使用dojo库在开发中实际遇到的问题</h3><p>1.组件的加载<br>假如两个页面使用了命名一样的id,同时引用了同一个组件挂在到该ID上，从当前页面跳转到另一个页面，由于上一个页面的JS还在运行，当读取当前<br>页面与上一个页面有统一的id的时候，往往会报错说该ID被重复占用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;项目简介&lt;/h3&gt;&lt;p&gt;数据中台主要是为企业内部提供的实现应用服务管理和数据管理的一个管理平台，主要包括权限管理，应用管理，服务管理和数据管理等功能
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>去哪网APP项目总结2</title>
    <link href="http://yoursite.com/2019/06/12/%E5%8E%BB%E5%93%AA%E7%BD%91APP%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%932/"/>
    <id>http://yoursite.com/2019/06/12/去哪网APP项目总结2/</id>
    <published>2019-06-12T06:49:42.000Z</published>
    <updated>2019-06-12T06:56:31.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用到的技术"><a href="#用到的技术" class="headerlink" title="用到的技术"></a>用到的技术</h2><h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><h3 id="钩子函数的使用"><a href="#钩子函数的使用" class="headerlink" title="钩子函数的使用"></a>钩子函数的使用</h3><h3 id="stylus"><a href="#stylus" class="headerlink" title="stylus"></a>stylus</h3><h2 id="用到的第三方插件"><a href="#用到的第三方插件" class="headerlink" title="用到的第三方插件"></a>用到的第三方插件</h2><h3 id="vue-awesome-swiper"><a href="#vue-awesome-swiper" class="headerlink" title="vue-awesome-swiper"></a>vue-awesome-swiper</h3><h3 id="iconfont"><a href="#iconfont" class="headerlink" title="iconfont"></a>iconfont</h3><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用到的技术&quot;&gt;&lt;a href=&quot;#用到的技术&quot; class=&quot;headerlink&quot; title=&quot;用到的技术&quot;&gt;&lt;/a&gt;用到的技术&lt;/h2&gt;&lt;h3 id=&quot;router&quot;&gt;&lt;a href=&quot;#router&quot; class=&quot;headerlink&quot; title=&quot;r
      
    
    </summary>
    
    
      <category term="项目技术" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>去哪网APP项目总结1</title>
    <link href="http://yoursite.com/2019/06/12/%E5%8E%BB%E5%93%AA%E7%BD%91APP%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%931/"/>
    <id>http://yoursite.com/2019/06/12/去哪网APP项目总结1/</id>
    <published>2019-06-12T02:46:51.000Z</published>
    <updated>2019-06-12T06:52:03.712Z</updated>
    
    <content type="html"><![CDATA[<h3 id="移动端项目搭建流程"><a href="#移动端项目搭建流程" class="headerlink" title="移动端项目搭建流程"></a>移动端项目搭建流程</h3><p>1.项目管理</p><p>第一步：在码云上注册账号，新建仓库，把仓库CLONE到本地</p><p>第二步：在本地的仓库文件下面创建vue项目</p><p>第三步： 如果是移动端项目，为了避免点击事件延迟，需要安装fastclick: <a href="https://www.jianshu.com/p/67bae6dfca90" target="_blank" rel="noopener">https://www.jianshu.com/p/67bae6dfca90</a></p><p>第四步：在码云上新建分支，分支一般根据某个功能模块进行名称，比如：主题界面，命名为：title-surface</p><p>第五步：回到本地项目文件夹下，用gitBash命令工具将分支pull到本地，具体操作如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">git checkout title-surface //切换都当前分支进行工作</span><br></pre></td></tr></table></figure><p>2.项目搭建</p><p>(1).vue项目中，main.js文件为入口文件</p><p>(2).src文件夹下面一般设置这些文件夹：<br>src/assets:<br>放置style文件，进行样式管理<br>放置images文件，进行图片管理</p><p>src/common:<br>放置公共组件</p><p>src/pages:<br>放置各个开发模块的文件夹，并且每个文件夹下会新建自己的子组件和父组件，例如：<br>开发一个首页模块，该模块包括：头部搜索，中间的banner，下面的list。<br>新建：home文件夹，在home文件夹下，新建父组件：home.vue<br>在home文件夹下新建comonents文件夹，该文件夹包括home.vue的子组件：HeaderSearch.vue,HomeBanner.vue,HomeList.vue<br>注意各个组件的关联关系和命名关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src/pages/home/home.vue</span><br><span class="line">src/pages/home/components/HeaderSearch.vue</span><br><span class="line">src/pages/home/components/HomeBanner.vue</span><br><span class="line">src/pages/home/components/HomeList.vue</span><br></pre></td></tr></table></figure><p>src/store:<br>我们知道父组件可以向子组件传递数据，兄弟组件之间也可以通过父组件传递数据，但是非父父子组件之间涉及到公共数据<br>的修改和使用时，该怎么处理呢？一般方式有两种：bus总栈，vuex来进行数据管理。<br>store下面的index.js文件主要存放公共数据,index.js文件内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import Vue from <span class="string">"vue"</span></span><br><span class="line">import Vuex from <span class="string">"vuex"</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="built_in">export</span> default new Vuex.Store(&#123;</span><br><span class="line">  state:&#123;/*可以读取里面的数据*/</span><br><span class="line">    city:<span class="string">"北京"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  actions:&#123;/*异步操作*/</span><br><span class="line">    changeCity(ctx,city)&#123;/*ctx 上下文*/</span><br><span class="line">      ctx.commit(<span class="string">"changeCity"</span>,city)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;/*同步操作,直接改变数据属性*/</span><br><span class="line">    changeCity(state,city)&#123;</span><br><span class="line">      state.city = city</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>vuex.Store中包括state,actions,mutations,getter四个属性，具体学习地址：<a href="https://vuex.vuejs.org/zh/guide/state.html" target="_blank" rel="noopener">https://vuex.vuejs.org/zh/guide/state.html</a></p><p>src/router<br>router文件夹下面的index.js文件主要存放的是路由配置的js文件，关于router学习地址：<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">https://router.vuejs.org/zh/</a></p><p>(3)项目中config文件夹下的index.js文件，配置好后要重启服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">     <span class="string">'/api'</span>:&#123;</span><br><span class="line">       target:<span class="string">"http://localhost:8080"</span>,</span><br><span class="line">       pathRewrite:&#123;</span><br><span class="line">         <span class="string">'^/api'</span>:<span class="string">'./static/mock'</span>//设置该属性值后，默认访问该路径时，就访问到对应的文件下的所有接口</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   // Various Dev Server settings</span><br><span class="line">   host: <span class="string">'localhost'</span>/*<span class="string">"172.30.59.38"</span>*/, </span><br><span class="line">   /*因为项目是通过webpack-server启动访问的，只能通过localhost才能访问,</span><br><span class="line">   真机联调的时候可以通过IP访问项目，当然这个也可以修改成测试或者生产服务地址*/</span><br><span class="line">   </span><br><span class="line">   port: 8080, // can be overwritten by process.env.PORT, <span class="keyword">if</span> port is <span class="keyword">in</span> use, a free one will be determined</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">"/api/index.json"</span>).<span class="keyword">then</span>(this.getHomeInfoSucc)</span><br></pre></td></tr></table></figure><p>(4)项目中static文件夹</p><p>这个文件夹下一般放置静态数据(mock)。</p><p>(5)项目中build文件夹中webpack.base.conf.js文件，配置好后要重启服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">    <span class="built_in">alias</span>: &#123;</span><br><span class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">      <span class="string">'styles'</span>: resolve(<span class="string">'src/assets/styles'</span>),/*设置默认路径，配置好后重新启动服务*/</span><br><span class="line">      <span class="string">'common'</span>: resolve(<span class="string">'src/common'</span>) /*设置默认路径*/</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;，</span><br><span class="line">  </span><br><span class="line">  在组件中使用common下面的组件时，可以以下面方式引入：</span><br><span class="line">  import FadeAnimation from <span class="string">"common/fade/Fade"</span>/*直接使用绝对路径*/</span><br><span class="line">  </span><br><span class="line">  在组件中使用styles下面的组件时，可以以下面方式引入：</span><br><span class="line">  @import <span class="string">"~styles/varibles.styl"</span>/*@代表是src这个目录*/</span><br></pre></td></tr></table></figure><p>3.项目更新</p><p>每个分支的开发步骤如下：</p><p>(1)dom布局，样式定义，公共样式要进行公共引入和管理</p><p>(2)通过axios进行数据获取，该步骤写在mounted钩子函数中</p><p>(3)书写JS代码逻辑流程</p><p>(4)测试没有问题后，在gitbash上操作以下步骤：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git status //确认改动了哪些文件</span><br><span class="line">git branch //查看当前所有分支</span><br><span class="line">git checkout 分支名称  //切换到当前分支，如果已在当前分支，第二步不用操作</span><br><span class="line">git add . //提交代码</span><br><span class="line">git commit -m <span class="string">"add a code"</span> //添加本次提交的代码说明</span><br><span class="line">git push //将代码推送到仓库上的分支</span><br><span class="line">git checkout master  //master为主干，切换到主干</span><br><span class="line">git merge origin/分支名称  //将该分支合并到主干</span><br><span class="line">git push //将本次代码提交到仓库上的主干</span><br></pre></td></tr></table></figure></p><p>(5) 在开发过程中，有时候不小心修改了已在远程分支上的代码，当本次提交时可能报错如下信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">please enter a commit message to explain .....</span><br></pre></td></tr></table></figure><p>解决方式如下：</p><p>–按键盘字母 i 进入insert模式</p><p>–修改最上面那行黄色合并信息,可以不修改</p><p>–按键盘左上角”Esc”</p><p>–输入”:wq!”,注意是冒号+wq,按回车键即可</p><p>4.项目联调，打包上线</p><p>对于移动端的项目，进行真机联调时，需要保证当前计算机的网络和手机的网络在同一局域网内。</p><p>打包上线操作步骤，打开gitbash命令行工具,在vue的项目文件夹下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>执行以上命令后，vue项目文件夹下会有一个dist文件夹生成，该文件夹下面的东西可以直接后台的同学，进行发布即可</p><p>本次项目开发先记录这么多，下一章节，会针对该移动端项目开发过程中用到的技术，进行细节化的总结</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;移动端项目搭建流程&quot;&gt;&lt;a href=&quot;#移动端项目搭建流程&quot; class=&quot;headerlink&quot; title=&quot;移动端项目搭建流程&quot;&gt;&lt;/a&gt;移动端项目搭建流程&lt;/h3&gt;&lt;p&gt;1.项目管理&lt;/p&gt;
&lt;p&gt;第一步：在码云上注册账号，新建仓库，把仓库CLONE到本
      
    
    </summary>
    
    
      <category term="项目流程" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>facade之外观模式</title>
    <link href="http://yoursite.com/2019/04/29/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B9%8Bfacade%E6%80%9D%E6%83%B3/"/>
    <id>http://yoursite.com/2019/04/29/前端开发之facade思想/</id>
    <published>2019-04-29T08:38:25.000Z</published>
    <updated>2019-04-29T06:11:26.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="facade模式的本质就是封装交互，简化调用。其目的并不是给予子系统添加新的功能接口，而是为了让外部减少与子系统内多个模块的交互，松散耦合，从而让外部能够更简单地使用子系统。"><a href="#facade模式的本质就是封装交互，简化调用。其目的并不是给予子系统添加新的功能接口，而是为了让外部减少与子系统内多个模块的交互，松散耦合，从而让外部能够更简单地使用子系统。" class="headerlink" title="facade模式的本质就是封装交互，简化调用。其目的并不是给予子系统添加新的功能接口，而是为了让外部减少与子系统内多个模块的交互，松散耦合，从而让外部能够更简单地使用子系统。"></a>facade模式的本质就是封装交互，简化调用。其目的并不是给予子系统添加新的功能接口，而是为了让外部减少与子系统内多个模块的交互，松散耦合，从而让外部能够更简单地使用子系统。</h3><p>以项目实际开发为例，前端调用同一个服务的接口有很多种类型，可能仅是路径和参数不同，但是服务器地址是一样的，为了简化调用，我们往往这样做。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//以实际项目开发为例：</span><br><span class="line"></span><br><span class="line">var appUrl = <span class="string">"http://app.test.cloud.com.cn"</span>,//应用服务</span><br><span class="line">grmUrl = <span class="string">"http://grm.test.cloud.com.cn"</span>;//grm服务</span><br><span class="line">//如果在多个业务模块调用appUrl,当url路径或者参数发生变动时，前端需要挨着挨挨冻多个代码处的相关参数，这样给工作带来了很多麻烦，为了简化调用我们可以这样做</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> AppFacade (url)&#123;//appFacade 接口文件</span><br><span class="line">this.url = url;</span><br><span class="line">this.update:<span class="keyword">function</span>(id)&#123;request.get(this.url+<span class="string">"update?id="</span>+id)&#125;;//编辑接口，在多个模块可以调用</span><br><span class="line">this.add:<span class="keyword">function</span>(id)&#123;request.get(this.url+<span class="string">"add?id="</span>+id)&#125;;//添加接口，在多个模块可以调用</span><br><span class="line">&#125;</span><br><span class="line">//在引用该相关服务接口的模块汇总new出对应的实例即可。如果修改编辑或者添加对应的接口，可以直接去facade文件修改。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;facade模式的本质就是封装交互，简化调用。其目的并不是给予子系统添加新的功能接口，而是为了让外部减少与子系统内多个模块的交互，松散耦合，从而让外部能够更简单地使用子系统。&quot;&gt;&lt;a href=&quot;#facade模式的本质就是封装交互，简化调用。其目的并不是给予子系
      
    
    </summary>
    
    
      <category term="facade" scheme="http://yoursite.com/tags/facade/"/>
    
  </entry>
  
  <entry>
    <title>dojo杂谈</title>
    <link href="http://yoursite.com/2019/04/29/dojo%E6%9D%82%E8%B0%88/"/>
    <id>http://yoursite.com/2019/04/29/dojo杂谈/</id>
    <published>2019-04-29T06:17:17.000Z</published>
    <updated>2019-04-29T07:59:05.809Z</updated>
    
    <content type="html"><![CDATA[<p>目前参与的项目是用dojo这个库做的前端工作，刚开始对这个库还是挺排斥的，用久了，反而发现它还是有很多优势的：<br>1.dojo提供了丰富的API对应的包，当然这些包都可以通过require异步加载进来（ADM加载器）；<br>2.利用dojo做组件化开发非常方便，组件和组件之间的继承，最后返回一个构造器，为代码开发也省去了大量的工作。<br>3.引入对应的包时，相对路径可以在dojo的dojoConfig里面进行配置；<br>4.在任何前端的框架中，ajax都是js中比较核心的一部分，在dojo中可以引入dojo/request,并通过facade四维来模块化，非常简易；<br>5.dojo中提供很多动画事件，图表，对前端的UI重构带来了很多便捷；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前参与的项目是用dojo这个库做的前端工作，刚开始对这个库还是挺排斥的，用久了，反而发现它还是有很多优势的：&lt;br&gt;1.dojo提供了丰富的API对应的包，当然这些包都可以通过require异步加载进来（ADM加载器）；&lt;br&gt;2.利用dojo做组件化开发非常方便，组件和
      
    
    </summary>
    
    
      <category term="dojo" scheme="http://yoursite.com/tags/dojo/"/>
    
  </entry>
  
  <entry>
    <title>关于原型</title>
    <link href="http://yoursite.com/2018/12/21/%E5%85%B3%E4%BA%8E%E5%8E%9F%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/12/21/关于原型/</id>
    <published>2018-12-21T05:47:47.000Z</published>
    <updated>2018-12-24T10:27:27.619Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h3><p>1.通过字面量方式定义一个对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;name:<span class="string">"baba"</span>&#125;</span><br><span class="line">console.log(a._proto_);//Object.prototype</span><br><span class="line">console.log(a.constructor);//f <span class="function"><span class="title">Object</span></span>()&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>2.通过构造函数创造实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var Person = <span class="function"><span class="title">function</span></span>()&#123;&#125;</span><br><span class="line">var prototype = Person.prototype//该构造函数的原型属性，只有构造函数拥有</span><br><span class="line">Person.constructor//即使指向<span class="function"><span class="title">function</span></span>()&#123;&#125;，但是该构造函数的原型对象是被Object构造的</span><br><span class="line">console.log(Person.prototype.hasOwnProperty(<span class="string">"constructor"</span>));//<span class="literal">true</span></span><br><span class="line">//在不重置原型对象的情况在，构造函数原型对象的constructor属性是当前构造函数Person</span><br><span class="line"></span><br><span class="line">//prototype 也是一个对象，该对象也有对应的_proto_属性，改属性值指向Object.prototype</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var person = new Person();</span><br><span class="line">console.log(person._proto_)//指向其对应的构造函数的的原型</span><br><span class="line">console.log(person.constructor)//指向<span class="function"><span class="title">Person</span></span>()&#123;&#125;</span><br><span class="line">console.log(person.hasOwnProperty(<span class="string">"constructor"</span>));//undefined</span><br><span class="line"></span><br><span class="line">注意：constructor 是构造函数原型对象自己的属性,构造函数的原型对象是Object构造出来的</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">var Cat = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">this.name = <span class="string">"cat"</span>;</span><br><span class="line">&#125;</span><br><span class="line">console.log(Cat.prototype.hasOwnProperty(<span class="string">"constructor"</span>));//<span class="literal">true</span> </span><br><span class="line">Cat.prototype = &#123;//重置原型对象就相当于更换了一个新的原型对象，对应的原型对象的构造器属性值也会默认为不是原来构造器，因此实例所指的constructor也不会是其对应的构造函数，不过你可以通过改变构造函数的原型对象的constructor属性值来改变指向的构造器</span><br><span class="line">color:<span class="string">"black"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(Cat.prototype.constructor == Cat);//<span class="literal">false</span></span><br><span class="line">console.log(Cat.prototype.constructor == Object);//<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">var cat = new Cat();</span><br><span class="line">console.log(cat.constructor == Cat);//<span class="literal">false</span></span><br><span class="line">console.log(cat.constructor == Object);//<span class="literal">true</span></span><br><span class="line">console.log(cat.hasOwnProperty(<span class="string">"constructor"</span>));//undefined</span><br></pre></td></tr></table></figure><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>Person.prototype == person.<em>proto</em><br>Person.prototype.<em>proto</em> == Object.prototype<br>Objtct.prototype.<em>proto</em> == null</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>第一种：原型继承<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var Person = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">this.name = <span class="string">"baba"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person.prototype.color=<span class="string">"red"</span>;</span><br><span class="line"></span><br><span class="line">var Cat = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">this.price=2000;</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype= new Person();</span><br><span class="line"></span><br><span class="line">console.log(Cat.prototype.constructor == Person);//<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">var cat = new Cat();</span><br><span class="line">console.log(cat.constructor == Person)//<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">console.log(cat.price);//2000</span><br><span class="line">console.log(cat.name);//baba</span><br><span class="line">console.log(cat.color);//red</span><br></pre></td></tr></table></figure></p><p>总结：直接将子类的原型(prototype)为父类的实例，技能继承父类的属性和方法，又能继承子类的属性和方法</p><p>第二种：构造继承<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var Parent = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">this.name = <span class="string">"baba"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Parent.prototype.color=<span class="string">"red"</span>;</span><br><span class="line"></span><br><span class="line">var Son = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">Parent.call(this);</span><br><span class="line">this.write = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(Son.prototype.constructor==Son);//<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">var son = new Son();</span><br><span class="line"></span><br><span class="line">console.log(son.name);//baba</span><br><span class="line">console.log(son.color);//undefined</span><br><span class="line">console.log(son.write);//<span class="literal">true</span></span><br><span class="line">console.log(son.constructor == Son);//<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>总结：利用call让子类继承父类的自由属性和方法，但是不能继承父类原型的属性和方法</p><p>第三种：实例继承<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var Parent = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">this.name = <span class="string">"baba"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Parent.prototype.color=<span class="string">"red"</span>;</span><br><span class="line"></span><br><span class="line">var Son = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    var parent = new Parent();</span><br><span class="line">    parent.class = <span class="string">"parent"</span>;</span><br><span class="line">    <span class="built_in">return</span> parent;</span><br><span class="line">&#125;</span><br><span class="line">Son.prototype.class =<span class="string">"son"</span>;</span><br><span class="line">Son.prototype.child = <span class="literal">true</span>;</span><br><span class="line">console.log(Son.prototype.constructor == Son);//<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">var son = new Son();</span><br><span class="line">console.log(son.__proto__ == Parent.prototype);//<span class="literal">true</span></span><br><span class="line">console.log(son.constructor == Parent);</span><br><span class="line">console.log(son.class);//parent</span><br><span class="line">console.log(son.child);//undefined</span><br></pre></td></tr></table></figure></p><p>总结：在子类找中返回父类实例，子类的实例会继承父类的原型对象和父类的自身属性，其实子类实例就是父类的实例</p><p>第三种：寄生组合继承<br>（1）在子类中通过call调用父类构造函数，这样就可以继承父类的自有属性与方法。<br>（2）通过自执行函数，将父类原型对象赋值给空构造函数的Super的原型对象，然后再将子类的原型对象重置为Super对象实例，子类实例也会继承父类原型对象上的属性和方法。<br>（3）由于是重置的子类原型对象，所以还需要重置一下constructor属性值。<br>（4）这样可以共享父类的原型对象，性能还不错。</p><h3 id="认识函数中this"><a href="#认识函数中this" class="headerlink" title="认识函数中this"></a>认识函数中this</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">name:<span class="string">"person"</span>,</span><br><span class="line">write:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(this==person);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">person.write();//<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">var cat = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">console.log(this==window);</span><br><span class="line">var smllCat = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(this == window);</span><br><span class="line">&#125;</span><br><span class="line">smllCat();//<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">cat();//<span class="literal">true</span>  cat()==window.cat()</span><br></pre></td></tr></table></figure><p>总结：非箭头函数中,this总是指向调用函数的对象。</p><h3 id="认识this和prototype的不同"><a href="#认识this和prototype的不同" class="headerlink" title="认识this和prototype的不同"></a>认识this和prototype的不同</h3><p>this:是让每个实例对象有自己的属性和方法<br>prototype:让每个实例化对象拥有同样的属性和方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var Person = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            this.arr = [1];</span><br><span class="line">        &#125;</span><br><span class="line">        Person.prototype.nums=[22];</span><br><span class="line"></span><br><span class="line">        var person1 = new Person();</span><br><span class="line">        person1.arr.push(<span class="string">"person1"</span>);</span><br><span class="line">        console.log(person1.arr);//[1，“person1<span class="string">"]</span></span><br><span class="line"><span class="string">        person1.nums.push("</span>person1<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var person2 = new Person();</span></span><br><span class="line"><span class="string">        person2.arr.push("</span>person2<span class="string">");</span></span><br><span class="line"><span class="string">        console.log(person2.arr);//[1，“person2"</span>]</span><br><span class="line">        person2.nums.push(<span class="string">"person2"</span>);</span><br><span class="line">        console.log(person2.nums);//[22, <span class="string">"person1"</span>, <span class="string">"person2"</span>]</span><br></pre></td></tr></table></figure></p><h3 id="从构造函数到实例"><a href="#从构造函数到实例" class="headerlink" title="从构造函数到实例"></a>从构造函数到实例</h3><p>在使用new操作符来调用一个构造函数的时候，发生了什么呢？其实很简单，就发生了四件事</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.var obj = &#123;&#125;;</span><br><span class="line">2.obj.__proto__ = CO.prototype;</span><br><span class="line">3.CO.call(obj);</span><br><span class="line">4.return obj;</span><br></pre></td></tr></table></figure><p>第一行，创建一个空对象obj<br>第二行，将这个空对象的<strong>proto</strong>成员指向了构造函数对象的prototype成员对象，这是最关键的一步<br>第三行，将构造函数的作用域赋给新对象，通过this创建的属性和方法被继承<br>第四行，返回新对象obj</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建对象的三种方式&quot;&gt;&lt;a href=&quot;#创建对象的三种方式&quot; class=&quot;headerlink&quot; title=&quot;创建对象的三种方式&quot;&gt;&lt;/a&gt;创建对象的三种方式&lt;/h3&gt;&lt;p&gt;1.通过字面量方式定义一个对象&lt;br&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webstorm安装和破解</title>
    <link href="http://yoursite.com/2018/12/11/webstorm%E5%AE%89%E8%A3%85%E5%92%8C%E7%A0%B4%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/12/11/webstorm安装和破解/</id>
    <published>2018-12-11T06:20:55.000Z</published>
    <updated>2018-12-11T06:28:42.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webstorm安装和破解"><a href="#webstorm安装和破解" class="headerlink" title="webstorm安装和破解"></a>webstorm安装和破解</h3><p>webstorm安装地址：(<a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">https://www.jetbrains.com/webstorm/</a>)<br>破解流程参考：(<a href="https://jingyan.baidu.com/article/77b8dc7faa0ece6174eab6d8.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/77b8dc7faa0ece6174eab6d8.html</a>)<br>IntelliJ IDEA 获取注册码:(<a href="http://idea.lanyus.com/" target="_blank" rel="noopener">http://idea.lanyus.com/</a>)<br>也许你会发现你获取的注册码没毛用，老是被报一些installed的信息。<br>不要灰心，进入C:\Windows\System32\drivers\etc找到hosts文件。把它拉到桌面在最后一行加一行：<br>0.0.0.0 account.jetbrains.com<br>再把修改过的文件拉回到etc文件夹中（大费周折的原因是：竟然没权限直接修改etc中的文件，擦，这个弄了半天）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;webstorm安装和破解&quot;&gt;&lt;a href=&quot;#webstorm安装和破解&quot; class=&quot;headerlink&quot; title=&quot;webstorm安装和破解&quot;&gt;&lt;/a&gt;webstorm安装和破解&lt;/h3&gt;&lt;p&gt;webstorm安装地址：(&lt;a href=&quot;htt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue 日志总结(1)</title>
    <link href="http://yoursite.com/2018/11/23/vue-%E6%97%A5%E5%BF%97%E6%80%BB%E7%BB%93-1/"/>
    <id>http://yoursite.com/2018/11/23/vue-日志总结-1/</id>
    <published>2018-11-23T01:23:46.000Z</published>
    <updated>2018-11-23T03:19:45.154Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue的理解"><a href="#vue的理解" class="headerlink" title="vue的理解"></a>vue的理解</h3><p>vue是HTML文本的JS模板，是一个轻量级的可以实现双向数据绑定的前端框架；</p><h3 id="vue的基础要点"><a href="#vue的基础要点" class="headerlink" title="vue的基础要点"></a>vue的基础要点</h3><p>1.vue初始化 略</p><p>2.vue的属性方法<br>2.1 vue 之component<br>组件注册时，要提供组件名和模板内容<br>Vue.component(MyComponent,{<!--  -->});<br>MyComponent 是组件名称<br>在HTML中引入该组件时 最好这样写：<my-component></my-component><br>注意：显示项目中并不需要注册那么多全局组件，我们只需要在当前组件文档中新建一个子组件就可以了。有些基础组件是常用的，可以注册为全局组件，具体如何操作请浏览一下地址：<br>详情查看：(<a href="https://cn.vuejs.org/v2/guide/components-registration.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components-registration.html</a>)</p><p>2.2 vue 之data</p><p>2.3 vue 之v-html &amp;&amp; v-text<br>v-html=”变量名称” DOM<br>v-text=”变量名称” 文本 </p><p>2.4 vue 之v-bind:属性（class,href,title,style等）<br>可以省略为  ：属性名称=”变量名称”</p><p>2.5 vue 之：class和：style的集中表达方式<br>:class=对象的时候，{classA:true},classA是类名<br>:class=数组的时候，[classA,classB]，classA和classB是类名<br>:class=”[三元表达式：布尔值？类名：类名B]”<br>:class=”[{classB:true},classA]”</p><p>:style=对象的时候 objectStyle={color:”red”,fontSize:”12px;”}<br>:style=数组的时候 styleArr = [objectStyle1,objectStyle2]</p><p>2.6 vue 之v-for(数组和对象操作)<br>v-for=”item in arr” 或者 v-for=”(item,index) in arr”<br>v-for=”value in obj” 或者 v-for=”(value,key) in obj”</p><p>2.7 vue 之v-if 和 v-else<br>v-if=”布尔值” 如果为true则渲染节点 支持<template v-if="ok">展示或隐藏</template><br>v-else=”布尔值” 否则消除节点<br>v-show 隐藏或者展示出节点 不支持<template></template></p><p>2.8 vue 之v-on<br>v-on:click = @click<br>@click = “方法名称” 或者 @click=”方法名称（arg）”</p><p>2.9 vue 之v-model 表单输入绑定<br>单选初始化checked:””<br>多选：checked[]<br>详情查看：(<a href="https://cn.vuejs.org/v2/guide/forms.html#%E5%A4%8D%E9%80%89%E6%A1%86" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/forms.html#%E5%A4%8D%E9%80%89%E6%A1%86</a>)</p><p>2.10 vue之Props<br>props:[变量1，变量2] <!-- 变零1和变量2都是传递给子组件的数据 --><br>props中变量的命名：驼峰法：dataName<br>那写在文档中的时候最好是data-name<br>props = [变量名] 或者 props={变量名：”值”}都可以</p><p>###vue的methods,computed watch区别<br>computed 在HTMLDOM加载后马上执行，如赋值<br>methods 需要出发如click才执行<br>wtach都是在computed或者methods后才开始执行，用于观察Vue实例上的数据变动</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue的理解&quot;&gt;&lt;a href=&quot;#vue的理解&quot; class=&quot;headerlink&quot; title=&quot;vue的理解&quot;&gt;&lt;/a&gt;vue的理解&lt;/h3&gt;&lt;p&gt;vue是HTML文本的JS模板，是一个轻量级的可以实现双向数据绑定的前端框架；&lt;/p&gt;
&lt;h3 id=&quot;vu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数组之前的赋值带来的问题</title>
    <link href="http://yoursite.com/2018/11/13/%E6%95%B0%E7%BB%84%E4%B9%8B%E5%89%8D%E7%9A%84%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/11/13/数组之前的赋值问题/</id>
    <published>2018-11-13T08:38:25.000Z</published>
    <updated>2018-11-13T02:34:35.676Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组1赋值给数组2-数组2长度发生变化-影响原来的数组1"><a href="#数组1赋值给数组2-数组2长度发生变化-影响原来的数组1" class="headerlink" title="数组1赋值给数组2 数组2长度发生变化 影响原来的数组1"></a>数组1赋值给数组2 数组2长度发生变化 影响原来的数组1</h3><p>业务场景：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var ARR1 = [1,2,3,4,5];</span><br><span class="line">var ARR2 = ARR1;</span><br><span class="line">ARR2.push(10);</span><br><span class="line">console.log(ARR1) //[1,2,3,4,5,10]</span><br></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var ARR1 = [1,2,3,4,5];</span><br><span class="line">var ARR2 = JSON.parse(JSON.stringify(ARR1));</span><br><span class="line">ARR2.push(10);</span><br><span class="line">console.log(ARR1) //[1,2,3,4,5]</span><br><span class="line">console.log(ARR2) //[1,2,3,4,5,10]</span><br></pre></td></tr></table></figure><p>当然还有另外两种方法去解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> deepCopsy(obj)&#123;</span><br><span class="line"><span class="keyword">if</span>(typeOf obj != <span class="string">"object"</span>)&#123;</span><br><span class="line"><span class="built_in">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">var json = JSON.stringify(obj);</span><br><span class="line">var newObj = JSON.parse(json);</span><br><span class="line"><span class="built_in">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line">var ARR1 = [1,2,3,4,5];</span><br><span class="line">var ARR2 = deepCopsy(ARR1);</span><br><span class="line">ARR2.push(10);</span><br><span class="line">console.log(ARR1) //[1,2,3,4,5]</span><br><span class="line">console.log(ARR2) //[1,2,3,4,5,10]</span><br></pre></td></tr></table></figure><p>下面这种用jQuery的方法:将ARR1递归到ARR2，改变ARR2的属性，不改变ARR1<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var ARR1 = [1,2,3,4,5];</span><br><span class="line">var ARR2 = $.extend([],ARR1);</span><br><span class="line">ARR2.push(10);</span><br><span class="line">console.log(ARR1) //[1,2,3,4,5]</span><br><span class="line">console.log(ARR2) //[1,2,3,4,5,10]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数组1赋值给数组2-数组2长度发生变化-影响原来的数组1&quot;&gt;&lt;a href=&quot;#数组1赋值给数组2-数组2长度发生变化-影响原来的数组1&quot; class=&quot;headerlink&quot; title=&quot;数组1赋值给数组2 数组2长度发生变化 影响原来的数组1&quot;&gt;&lt;/a&gt;数组
      
    
    </summary>
    
    
      <category term="token" scheme="http://yoursite.com/tags/token/"/>
    
  </entry>
  
  <entry>
    <title>项目中遇到的安全问题</title>
    <link href="http://yoursite.com/2018/10/15/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/15/项目中遇到的安全问题/</id>
    <published>2018-10-15T08:38:25.000Z</published>
    <updated>2018-11-13T02:18:45.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="token的原理和作用"><a href="#token的原理和作用" class="headerlink" title="token的原理和作用"></a>token的原理和作用</h3><p>token,就是令牌，最大的特点就是随机性，不可预测，一般黑客或者软件无法猜测出来的。<br>一般用在2个地方：<br>1.防止表单重复提交；<br>2.anti csrf(跨站点请求伪造);</p><h3 id="HTTP-token在URL中或者在文档中暴露的解决方式有哪些？"><a href="#HTTP-token在URL中或者在文档中暴露的解决方式有哪些？" class="headerlink" title="HTTP token在URL中或者在文档中暴露的解决方式有哪些？"></a>HTTP token在URL中或者在文档中暴露的解决方式有哪些？</h3><p>为了token不暴露在URL或者body中，目前前段把token设置到headers中，后台去读取</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;token的原理和作用&quot;&gt;&lt;a href=&quot;#token的原理和作用&quot; class=&quot;headerlink&quot; title=&quot;token的原理和作用&quot;&gt;&lt;/a&gt;token的原理和作用&lt;/h3&gt;&lt;p&gt;token,就是令牌，最大的特点就是随机性，不可预测，一般黑客或者软
      
    
    </summary>
    
    
      <category term="token" scheme="http://yoursite.com/tags/token/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求之安全问题</title>
    <link href="http://yoursite.com/2018/10/09/HTTP%E8%AF%B7%E6%B1%82%E4%B9%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/09/HTTP请求之安全问题/</id>
    <published>2018-10-09T01:21:30.000Z</published>
    <updated>2018-12-11T06:21:58.682Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTTP-8种请求方法"><a href="#HTTP-8种请求方法" class="headerlink" title="HTTP 8种请求方法"></a>HTTP 8种请求方法</h3><p>想了解http协议: <a href="http://blog.csdn.net/ahaaaaa/article/details/51063598" target="_blank" rel="noopener">http协议</a><br>1.option : 返回服务器对特定资源所支持的HTML请求方法，或者web服务器发送“测试服务功能”（允许客户端查看服务器功能）；<br>2.get : 向特定资源发出请求（请求制定页面信息，返回实体主体）；<br>3.post : 向指定资源提交数据进行处理请求（提交表单，上传文件），有可能导致新的资源建立和原有资源的修改；<br>4.put : 向指定资源位置上传其最新内容（从客户端向服务器传送的数据取代制定的文档内容）；<br>5.head : 与get请求一致的内容，但响应体不会返回，获取包含在消息头部的原信息（用于获取头部内容）；<br>6.delete : 请求服务器删除request-URL所标识的资源，（请求服务器删除页面）；<br>7.trace : 回显服务器收到的请求，用于测试和诊断；<br>8.connect HTTP/1.1协议中能够将连接改为管道方式的代理服务器；</p><h3 id="get-和-post的区别"><a href="#get-和-post的区别" class="headerlink" title="get 和 post的区别"></a>get 和 post的区别</h3><p>首先get和post都是通过TCP来传输数据的，TCP就像一辆辆运输数据的火车，为了区别货车的区别就贴上get和post<br>标签。简单的说，get产生一个TCP数据包，而post产生两个TCP数据包。对于get请求，浏览器会把header和data一起发<br>出去，服务器返回200（返回数据）；对于post请求，浏览器先发送header请求，服务器返回100 continue,浏览器再<br>继续发送data请求，服务器返回200；<br>也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。</p><h3 id="HTTP的安全请求"><a href="#HTTP的安全请求" class="headerlink" title="HTTP的安全请求"></a>HTTP的安全请求</h3><p>不安全的HTTP请求方式会造成系统的文件的上传和删除，从而对系统的完整性和可用性造成破坏。原因如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码开发时没有对请求凡是做限制：</span><br><span class="line">不规范代码如 @RequestMapping(value=<span class="string">"/test"</span>)</span><br><span class="line">规范代码如：@ReauestMapping(value=<span class="string">"/test"</span>,method=<span class="string">"get"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HTTP-8种请求方法&quot;&gt;&lt;a href=&quot;#HTTP-8种请求方法&quot; class=&quot;headerlink&quot; title=&quot;HTTP 8种请求方法&quot;&gt;&lt;/a&gt;HTTP 8种请求方法&lt;/h3&gt;&lt;p&gt;想了解http协议: &lt;a href=&quot;http://blog.cs
      
    
    </summary>
    
    
      <category term="http请求方法,http请求安全" scheme="http://yoursite.com/tags/http%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95-http%E8%AF%B7%E6%B1%82%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>DOJO---下拉框change事件</title>
    <link href="http://yoursite.com/2018/09/20/secondlog/"/>
    <id>http://yoursite.com/2018/09/20/secondlog/</id>
    <published>2018-09-20T07:34:18.000Z</published>
    <updated>2018-09-21T06:24:57.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="select-对象"><a href="#select-对象" class="headerlink" title="select 对象"></a>select 对象</h3><p>Dojo中提供select组件用于生成下拉框。</p><p>demo:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var options = [</span><br><span class="line">&#123;value:<span class="string">"value1"</span>,label:<span class="string">"optionText"</span>,selected:<span class="literal">false</span>&#125;,</span><br><span class="line">&#123;value:<span class="string">"value2"</span>,label:<span class="string">"optionText"</span>,selected:<span class="literal">true</span>&#125;</span><br><span class="line">];</span><br><span class="line">value//下拉选项的唯一标识，</span><br><span class="line">lable//下拉选项要显示的文本，</span><br><span class="line">selected//默认下拉选项是否选中，</span><br><span class="line">//注意：options可以扩展其他字段，便于属于操作，</span><br><span class="line"></span><br><span class="line">var selectDemo = new Select(&#123;</span><br><span class="line">name:<span class="string">"option"</span>,//字段</span><br><span class="line">style: style,//样式</span><br><span class="line">options: options</span><br><span class="line">&#125;);</span><br><span class="line">selectDemo.placeAt(divContainer);//divContainer是存放组件的区域</span><br></pre></td></tr></table></figure></p><p>DOJO/SELECT: <a href="http://dojotoolkit.org/reference-guide/1.8/dijit/form/Select.html" target="_blank" rel="noopener">dojo/select</a></p><h3 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h3><p>在动态生成的table中，行都有一个select对象，当点击每行的的下拉对象时，该行的数据单位会展示不同的效果<br>例如：下拉框有时间，和状态，百分比多种选项时，当选择时间时，该行的其中一个数据单位为ms，当选择百分比<br>时，该行的其中一个数据变成%（后台提供的仅有数据无单位）。</p><h3 id="divContainer-容器唯一"><a href="#divContainer-容器唯一" class="headerlink" title="divContainer 容器唯一"></a>divContainer 容器唯一</h3><p>动态生成的过程中，给容器一个唯一的id,因为整个table有多个下拉框，确定唯一标识，才可以成功批量生成table.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">divContainer.setAttribute(<span class="string">"id"</span>,i++);</span><br></pre></td></tr></table></figure><h3 id="change-事件"><a href="#change-事件" class="headerlink" title="change 事件"></a>change 事件</h3><p>例如操作其中一行的select的对象:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">selectDemo.on(<span class="string">"change"</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">//TODO</span><br><span class="line">selectDemo.set(<span class="string">"value"</span>,data.value);//data从后台获取的数据</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>当渲染table的时候，该下拉对象默认第一个下拉对象是options[0],渲染数据的过程是根据数据给出的value值设<br>置selectDemo的选中对象的。有时候data.value!=0,selectDemo则相当于发生了一次change事件，但是用户希望<br>在没有手动操作的情况下，不允许执行change引发的事件，这个bug我搞了半天，尝试很多方法，后来才发现，只需<br>要在数据渲染前设置一个flag = false，渲染数据后改变变量falg = true，if(flag)change的时候return回来，<br>具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(data != null)&#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">selectDemo.set(<span class="string">"value"</span>,data.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">selectDemo.on(<span class="string">"change"</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">//TODO</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">flag = !flag;</span><br><span class="line"><span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">selectDemo.set(<span class="string">"value"</span>,data.value);//data从后台获取的数据</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;select-对象&quot;&gt;&lt;a href=&quot;#select-对象&quot; class=&quot;headerlink&quot; title=&quot;select 对象&quot;&gt;&lt;/a&gt;select 对象&lt;/h3&gt;&lt;p&gt;Dojo中提供select组件用于生成下拉框。&lt;/p&gt;
&lt;p&gt;demo:&lt;br&gt;&lt;f
      
    
    </summary>
    
    
      <category term="dojo/select/change.evt" scheme="http://yoursite.com/tags/dojo-select-change-evt/"/>
    
  </entry>
  
  <entry>
    <title>height auto 和 height</title>
    <link href="http://yoursite.com/2018/09/19/firstlog/"/>
    <id>http://yoursite.com/2018/09/19/firstlog/</id>
    <published>2018-09-19T06:45:36.441Z</published>
    <updated>2018-09-21T08:58:00.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="height-auto"><a href="#height-auto" class="headerlink" title="height:auto"></a>height:auto</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div style=<span class="string">"height:auto"</span>&gt;我会随着内容多少而高度发生变化&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="height-100"><a href="#height-100" class="headerlink" title="height:100%"></a>height:100%</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"height:100px;"</span>&gt;</span><br><span class="line">&lt;div style=<span class="string">"height:100%"</span>&gt;我要继承父元素的高度&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;height-auto&quot;&gt;&lt;a href=&quot;#height-auto&quot; class=&quot;headerlink&quot; title=&quot;height:auto&quot;&gt;&lt;/a&gt;height:auto&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo + github 搭建博客</title>
    <link href="http://yoursite.com/2018/09/18/zerolog/"/>
    <id>http://yoursite.com/2018/09/18/zerolog/</id>
    <published>2018-09-18T08:54:47.718Z</published>
    <updated>2018-09-21T09:25:44.478Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，我是流浪兔，欢迎浏览我的博客。<br>终于搭建了一个属于自己的博客，这个过程也遇到过一些小坑，记录一下搭建博客的一个过程，希望对各位有所帮助。</p><h3 id="github-注册账户"><a href="#github-注册账户" class="headerlink" title="github 注册账户"></a>github 注册账户</h3><p>github 地址：<a href="https://github.com/" target="_blank" rel="noopener">go to github</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：给自己起一个好听的名字奥，这样你的URL地址就会显得高大上一些（reposltory name）</span><br></pre></td></tr></table></figure><h3 id="安装node和git"><a href="#安装node和git" class="headerlink" title="安装node和git"></a>安装node和git</h3><p>这里省略一千字，具体可以问度娘</p><h3 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h3><p>hexo 是一个快速高效的node.js静态博客框架，hexo使用markdown解析文章（所以赶快下载一个markdown工具吧）,<br>hexo 的安装这里省略一千字<br>但是请牢记hexo常用的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo -clean //清除缓存文件</span><br><span class="line">hexo -g //生成静态文件</span><br><span class="line">hexo -s//启动本地服务，浏览本地效果</span><br><span class="line">hexo -d//把项目提交到github上，并且在https://yourname/yourname.github.io浏览效果</span><br></pre></td></tr></table></figure><p>认识hexo: <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo</a></p><p>你的博客生成后，可能对主题不满意，至于怎么改变主题这里省去一千字，因为网上都有，我想说的是，有时候你可能对生成的主题锦上添花，<br>不妨先熟悉一下hexo 对应主题下的模板文件，每个文件（不管是CSS还是HTML），都可进行扩展和更改。</p><h3 id="发布我的第一篇博客"><a href="#发布我的第一篇博客" class="headerlink" title="发布我的第一篇博客"></a>发布我的第一篇博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">start:</span><br><span class="line">hexo -n <span class="string">"firstLog"</span> //新建文章</span><br><span class="line">//编辑新生成的firstLog.md文件</span><br><span class="line">hexo -clean</span><br><span class="line">hexo -g</span><br><span class="line">hexo -d//发布即可</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">/*hexo -new page <span class="string">"firstFile"</span>//新建页面*/</span><br></pre></td></tr></table></figure><p>好了暂且分享这么多，有什么坑以后可大家再分享，谢谢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大家好，我是流浪兔，欢迎浏览我的博客。&lt;br&gt;终于搭建了一个属于自己的博客，这个过程也遇到过一些小坑，记录一下搭建博客的一个过程，希望对各位有所帮助。&lt;/p&gt;
&lt;h3 id=&quot;github-注册账户&quot;&gt;&lt;a href=&quot;#github-注册账户&quot; class=&quot;header
      
    
    </summary>
    
    
  </entry>
  
</feed>
